{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: Configure Your SPA for Organizations",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "What you'll do",
      "description": "**Here's what you'll do:**  \n\nIn this lab, you will learn how to configure your Single-Page Application (SPA) to work with Organizations in order to manage your business users.\n\nThe SPA in question is a vanilla JavaScript application that consumes the Expenses API.\n\nYou will configure Organization Roles associated with permissions for this API."
    },
    {
      "file": "",
      "line": 1,
      "title": "Enable Business Users",
      "description": "## Enable Business Users\nWhen you began this lab, a script automatically registered the Single Page Application (Lab: SPA) that this lab uses in your tenant. \n\nThe Callback and Logout URLs with the URL of your application were also automatically configured. This was done because we assume at this point in your learning you know how to complete these steps. If you need to review these steps, you can check out this lab: [Working with APIs from a SPA](https://github.com/auth0-training/labs-node-working-with-apis-spa).\n\nNow we'll configure the SPA for Organizations by enabling business users and specifying a login flow for Organizations.\n\n\n1. #### Go to the [Applications page](https://manage.auth0.com/#/applications), and click the _Lab: SPA_ in the application list view.\n\n1. #### Select the the *Organizations* tab.\n\n1. #### Under *Types of Users*, select *Business Users*\n\n1. #### Under *Login Flow*, select *Prompt for Credentials*.\n\n1. #### Scroll down to the bottom of this page and select *Save Changes*"
    },
    {
      "file": "",
      "line": 1,
      "title": "Create an Organization",
      "description": "## Create an Organization\nNow we will begin the process of creating Organizations to represent the businesses that will have access to our application. We'll start off with **Agency Inc**.\n\n1. #### From the left navigation menu, go to the [Organizations page](https://manage.auth0.com/#/organizations).\n\n1. #### Select the *Create Organization* button.\n\n1. #### Enter *agency-inc* into the *Name* field.\n\n1. #### Enter *Agency Inc* into the *Display Name* field.\n\n1. #### Select the *Add Organization* button to save this configuration.",
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 74
        }
      }
    },
    {
      "file": "",
      "description": "## Set Organization Branding.\n\nNow that you've created the **Agency Inc** organization, you'll see that you've landed on the organization's **Overview** page. From here, we can configure some branding options.\n\n1. #### Set the Primary Color to `#811ca3`\n\n1. #### Set the logo to",
      "line": 1
    },
    {
      "file": "src/spa-app/app.js",
      "description": "## Requesting Consent\nHere, we'll update the spa-app's code to include the audience and scope that users will need to grant consent to.\n\n``` jsx\nwindow.auth0Client = await auth0.createAuth0Client({\n  domain,\n  clientId,\n    authorizationParams: {\n    redirect_uri,\n    audience: \"https://expenses-api\", // ðŸ‘ˆ Added\n    scope: \"read:reports openid email profile\", // ðŸ‘ˆ Added\n},\n    cacheLocation: \"localstorage\",\n});\n```\n\nThese additional properties tell the SPA SDK the audience and scope needed in the access token your application will request. The SDK will try to fetch access tokens capable of consuming the `https://expenses-api` API with the `read:reports` scope.",
      "line": 15,
      "selection": {
        "start": {
          "line": 8,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 6
        }
      }
    },
    {
      "file": "src/spa-app/services/expensesApi.js",
      "description": "## The expensesApi.js File\nAbove, you can see all the code used to request data from the Expenses API. There are two functions defined: `getTotals` and `getReports`. The getTotals function calls the Expenses API, but the `getReports` function is hardcoded with data.\n\nLet's change this, so that the data is requested from the API instead.",
      "line": 39
    },
    {
      "file": "src/spa-app/services/expensesApi.js",
      "description": "## Replace Hard-Coded Data with the API Call\n\nThis code specifies the call for data to the Expenses API.\n\nThe new lines are nested inside a `try/catch` block and are executed when the expenses view is requested.\n\nFirst, the application calls the `getTokenSilently()` method (provided by the SPA SDK) to fetch a token without involving your user.\n\nAfter fetching an access token, the application will issue a request to the private API on the user's behalf.\n\nNote the authorization header passed to the `fetch()` function; this header includes the access token required to consume the expenses API.\n\n``` jsx\nconst token = await window.auth0Client.getTokenSilently();\nconst options = {\n    method: \"GET\",\n    headers: {\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${token}`,\n    },\n};\nconst res = await fetch(`${window.env.API_URL}/reports`, options);\nconst json = await res.json();\nreturn json;\n```",
      "line": 33,
      "selection": {
        "start": {
          "line": 21,
          "character": 1
        },
        "end": {
          "line": 32,
          "character": 9
        }
      }
    },
    {
      "title": "placeholder",
      "description": "#### Deploy the SPA and API\n   1. #### Click [here](command:workbench.action.debug.start) to build and deploy the SPA and API.\n   1. #### Ensure the ports are public so that the SPA app and API can communicate. Click the ports tab below, then right click each endpoint, and change the port visibility to public. You may see additional ports listed, which you can safely ignore.\n     ![](https://cdn.auth0.com/website/auth0/labs/ilt/public-ports.gif)\n  1. #### Click [here](command:auth0.lab.openEndpointByName?[\"Lab: API, Lab: SPA\"]) to launch and view the SPA and API in your web browser.\n  1. #### Because the ports were made public, you may be prompted with the following warning from GitHub:\n        ![GitHub warning prompt](https://cdn.auth0.com/website/a0fun/v2/github-codespaces-dialog.png)\n    \n        Select **Continue** on both your Web App and API pages to continue."
    },
    {
      "file": "",
      "line": 1,
      "title": "Give it a try!",
      "description": "## Give it a try!\nYou are now ready to test the new version of the application. \n\nBut first, a little housekeeping is in order. \n1. #### Save changes and re-deploy:\n     1. #### Click [here](command:workbench.action.files.saveAll) to save all of the progress you've made.\n     1. #### Click [here](command:workbench.action.debug.stop) to stop the previous version of the SPA, and [here](command:workbench.action.debug.stop) to stop the previous version of the API.\n     1. #### Now, click [here](command:workbench.action.debug.start) to re-deploy the new versions.\n     1. #### Click [here](command:auth0.lab.openEndpointByName?[\"Lab: SPA, Lab: API\"]) to launch the SPA and API in your browser.\n\n1. #### Log in and try it out!\n     1. #### Click the Login link to start the authentication process. \n     1. #### Authenticate with the login you created for use with the lab materials.\n\n     The homepage should now addresses you by name and your profile image will be shown near the upper-right corner. It'll look something like this:\n\n     ![image11](https://cdn.auth0.com/website/training/example/IDFUN-M04-L01-Ex03/img-11.png)\n  \n     1. #### Click the Expenses link. \n     \n     The SPA will call the Expenses API and show the data retrieved. It should look something like this:\n\n     ![image15](https://cdn.auth0.com/website/training/example/IDFUN-M04-L01-Ex03/img-15.png)\n\nNice work! You have successfully updated the SPA application to call a secure API endpoint!"
    }
  ]
}