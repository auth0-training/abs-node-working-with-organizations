{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2: Configure Your SPA for Organizations",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "What you'll do",
      "description": "**Here's what you'll do:**  \n\nIn this lab, you will learn how to configure your Single-Page Application (SPA) to work with Organizations in order to manage your business users.\n\nThe SPA in question is a vanilla JavaScript application that consumes the Expenses API.\n\nYou will configure Organization Roles associated with permissions for this API."
    },
    {
      "file": "",
      "line": 1,
      "title": "Enable Business Users",
      "description": "## Enable Business Users\nWhen you began this lab, a script automatically registered the Single Page Application (Lab: SPA) that this lab uses in your tenant. \n\nThe Callback and Logout URLs with the URL of your application were also automatically configured. This was done because we assume at this point in your learning you know how to complete these steps. If you need to review these steps, you can check out this lab: [Working with APIs from a SPA](https://github.com/auth0-training/labs-node-working-with-apis-spa).\n\nNow we'll configure the SPA for Organizations by enabling business users and specifying a login flow for Organizations.\n\n\n1. #### Go to the [Applications page](https://manage.auth0.com/#/applications), and select _Lab: SPA_ in the application list view.\n\n1. #### Select the the *Organizations* tab.\n\n1. #### Under *Types of Users*, select *Business Users*\n\n1. #### Under *Login Flow*, select *Prompt for Credentials*.\n\n1. #### Scroll down to the bottom of this page and select *Save Changes*",
      "selection": {
        "start": {
          "line": 9,
          "character": 4
        },
        "end": {
          "line": 9,
          "character": 135
        }
      }
    },
    {
      "file": "",
      "line": 1,
      "title": "Create an Organization",
      "description": "## Create an Organization\nNow we will begin the process of creating Organizations to represent the businesses that will have access to our application. We'll start off with **Agency Inc**.\n\n1. #### From the left navigation menu, go to the [Organizations page](https://manage.auth0.com/#/organizations).\n\n1. #### Select the *Create Organization* button.\n\n1. #### Enter *agency-inc* into the *Name* field.\n\n1. #### Enter *Agency Inc* into the *Display Name* field.\n\n1. #### Select the *Add Organization* button to save this configuration.",
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 6,
          "character": 74
        }
      }
    },
    {
      "file": "",
      "description": "## Set Organization Branding\n\nNow that you've created the **Agency Inc** organization, you'll see that you've landed on the organization's **Overview** page. From here, we can configure some branding options.\n\n1. #### Set the Primary Color to `#811ca3`\n\n1. #### Set the logo to `https://cdn.auth0.com/website/auth0-training/agency-inc-logo.svg`",
      "line": 1,
      "selection": {
        "start": {
          "line": 5,
          "character": 36
        },
        "end": {
          "line": 5,
          "character": 42
        }
      }
    },
    {
      "description": "## Enable Connections for an Organization\nBefore Organization members can log in through this Agency Inc, we'll need to enable at least one connection for it. Some business partners might bring their own identity provider (IdP), while others might not. When business partners do not have their own IdP, a good solution is to use an Auth0 database connection. Let's do that now!\n\n1. #### From the current Overview page, select *Connections*.\n2. #### Select the *Enable Connections* button.\n3. #### Select *Username-Password-Authentication*.\n4. #### Select the *Enable Connection* button to save this configuration.\n\nNow we have the option of setting up auto-membership for this connection. This means that any user logging in with this connection will be granted membership to the Agency Inc Organization automatically. For the purposes of this lab, keep the default selection: **Disable Auto-Membership**. Instead, we'll be sending manually granting membership to users.",
      "selection": {
        "start": {
          "line": 8,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 6
        }
      },
      "title": "Enable Connections for an Organization"
    },
    {
      "title": "Review Lab: API Permissions",
      "description": "## Review Lab: API Permissions\n\nRecall that the Lab: API was registered to your tenant on your behalf during the configuration step of this lab. We'll now review the permissions that are set on this API.\n\n1. #### Go to the [APIs page](https://manage.auth0.com/#/apis), and select _Lab: API_ in the API list view.\n2. #### Select the *Permissions* tab and review the permissions.\n\nNotice that there is just one permission set for this API, *read:reports*. This is because our API currently only defines one private route which only requires this scope. Let's create a few more permissions for the purpose of this lab.\n"
    },
    {
      "title": "Add Additional Permissions to Lab: API",
      "description": "## Add Additional Permissions to Lab: API\n\nNext we'll create additional permissions for Lab: API.\n\n#### 1. In the *Permission* field, enter `delete:reports`\n#### 2. In the *Description* field, enter `Delete reports`\n#### 3. Select the *+ Add* button to save.\n#### 4. Repeat this process to create additional permissions with the following *Permission* / *Description* pairs:\n-  `create:reports`   / `Create reports`\n-  `edit:reports` / `Edit reports`"
    },
    {
      "title": "Enable RBAC",
      "description": "## Enable RBAC\nIn order to grant permissions to Organization members, we'll need to define some roles with the necessary permissions. To do this, we first need to enable RBAC on the Lab: API.\n\n1. #### From the *Lab: API* page, select the *Settings* tab.\n1. #### Toggle on *Enable RBAC*\n\n"
    },
    {
      "title": "Create Roles",
      "description": "Now let's create the roles that we can assign to members of our Organization.\n\n1. #### Go to the Roles page by going to *User Management* > *Roles* in the left navigation menu.\n2. #### Select the *Add Role* button.\n3. #### Enter `Report Viewer` in the *Name* field.\n4. #### Enter `Read-only reports` in the *Description* field.\n5. #### Select the *Create* button.\n6. #### You should now be on the *Viewer* configuration page. Select the *Permissions* tab on this page.\n7. #### Select the *Add Permissions* button.\n8. #### Select *Lab: API* from the drop-down menu.\n9. #### Select the *read:reports* checkbox.\n10. #### Select the *Add Permissions* button to save this.\n\nRepeat these steps to create two more roles with the specified permissions:\n\n- #### Report Editor\n    - Name: Report Editor\n    - Description: View, create, and edit reports\n    - Permissions on **Lab: API**: `read:reports`, `create:reports`, `edit:reports`\n\n- #### Report Admin\n    - Name: Report Admin\n    - Description: View create, edit, and delete reports\n    - Permissions on **Lab: API**: `read:reports`, `create:reports`, `edit:reports`, `delete:reports`"
    },
    {
      "title": "Set Up Test Users",
      "description": "## Set Up Test Users\nBefore we can grant Organization membership, we'll need some test users in our **User-Password-Authentication** database connection. In this step, we leverage gmail aliases for the email addresses of these test users. If you do not have gmail or would rather use a different email provider, feel free to do so.\n\n1. #### From the left navigation menu go to *User Management* > *Users*\n2. #### Select the *Create User* button.\n3. #### In the *Email* field, enter a gmail alias in the form up *your-gmail-username*+*agency-viewer*@gmail.com. For instance, if my gmail address is *user@gmail.com*, I would enter *user+agency-viewer@gmail.com*\n4. #### Fill in your desired password in the two password fields.\n5. #### Make sure that *Username-Password-Authentication* is selected in the *Connection* field.\n6. #### Select the *Create User* button.\n\nRepeat this process to create two additional users using the following aliases:\n\n- #### *your-gmail-username*+*agency-editor*@gmail.com\n- #### *your-gmail-username*+*agency-admin*@gmail.com"
    },
    {
      "title": "Grant Organization Membership",
      "description": "## Grant Organization Membership\n\nRecall that there are a few ways of onboarding Organization members. We will be manually granting organization membership, which is a common strategy when prototyping or testing out a non-production B2B application.\n\n#### 1. Go to the *Organizations* page through the left navigation menu.\n#### 2. Select *Agency Inc*.\n#### 3. Select the *Members* tab.\n#### 4. Select the *Add Members* button.\n#### 5. Select the three members you just created in the previous step (e.g., username+agency-viewer@gmail.com, username+agency-editor@gmail.com, username+agency-admin@gmail.com). The easiest way to do this is to type in *agency*. Then you can select each of the three members to add them to the field.\n#### 6. Select the *Add Member(S)* button.\n\n"
    },
    {
      "title": "Grant Organization Roles",
      "description": "## Grant Organization Roles\n\nNow we need to grant each of our new organizations the appropriate Organization role. Notice we are doing this under the context of an Organization and not tenant-wide. This is so each user is only granted these permissions when they log in under the context of their Organization (in this case, Agency Inc).\n\n#### 1. Select the *viewer* member (e.g., username+viewer@gmail.com) from the *Agency Inc Members* page.\n#### 2. Select the *Assign Roles* button.\n#### 3. Select the *Report Viewer* role.\n#### 4. Select the *Assign Role(S)* button.\n\nSelect the **Back to Agency Inc** link and repeat these steps to:\n\n- #### Assign the *editor* member (e.g., username+editor@gmail.com) the *Report Editor* role.\n- #### Assign the *admin* member (e.g., username+admin@gmail.com) the *Report Admin* role."
    },
    {
      "title": "Deploy the SPA and API",
      "description": "## Deploy the SPA and API\n   1. #### Click [here](command:workbench.action.debug.start) to build and deploy the SPA and API.\n   1. #### Ensure the ports are public so that the SPA app and API can communicate. Click the ports tab below, then right click each endpoint, and change the port visibility to public. You may see additional ports listed, which you can safely ignore.\n   ![](https://cdn.auth0.com/website/auth0/labs/ilt/public-ports.gif)\n  1. #### Click [here](command:auth0.lab.openEndpointByName?[\"Lab: API, Lab: SPA\"]) to launch and view the SPA and API in your web browser.\n  1. #### Because the ports were made public, you may be prompted with the following warning from GitHub:\n        ![GitHub warning prompt](https://cdn.auth0.com/website/a0fun/v2/github-codespaces-dialog.png)\n    \n        Select **Continue** on both your Web App and API pages to continue."
    },
    {
      "file": "",
      "line": 1,
      "title": "Test the Viewer Member Account",
      "description": "## Test the Viewer Member Account\nYou are now ready to test the B2B application and the Organization roles.\n\n1. #### Click the Login link to start the authentication process. \n1. #### Enter the email address of the *viewer* account you created (e.g., username+viewer@gmail.com)\n1. #### Enter the password for this account.\n1. #### Wait... Shouldn't I be prompted for my Organization?! Since this account is only a member of one Organization, this step is skipped.\n\n     You should now be logged in as the viewer account and the account name and and your profile image will be shown near the upper-right corner. \n  \n1. #### Click the Expenses link. \n     \n     The SPA will call the Expenses API and show the data retrieved. It should look something like this:\n\n     ![image15](https://cdn.auth0.com/website/training/example/IDFUN-M04-L01-Ex03/img-15.png)\n\nThe data retrieved is from a protected Expenses API endpoint. How is this access managed to this protected endpoint? Let's take a closer look..."
    },
    {
      "file": "src/api/api/index.js",
      "selection": {
        "start": {
          "line": 62,
          "character": 1
        },
        "end": {
          "line": 62,
          "character": 68
        }
      },
      "description": "## Examine the Expenses API reports Endpoint\n\nBefore we review how access is granted to the protected Expenses API endpoint, let's examine the Expenses API code. Notice that the ` GET /reports` endpoint (the endpoint called when we select **Expenses** from our SPA app) is protected and requires the `read:reports` permission. This permission must be added to the *scopes* claim in the access token.\n\nLet's examine the access token that was returned from the Auth0 tenant's authorization server when we logged in as the viewer user."
    },
    {
      "title": "Examine the Access Token",
      "description": "## Examine the Access Token\n#### 1. In the same tab that you opened your application in, right click and select *Inspect* to open Google Chrome's Developer Tools.\n#### 2. Select the *Application* tab.\n#### 3. Select *Local Storage* and select your application (it should be the only entry).\n#### 4. Select the entry that has *\"access_token\"* in its *Value* section. \n#### 5. At the bottom of the screen, click on innermost *body* to expand it. This will reveal your encoded access token as well as its decoded standard claims.\n#### 6. Right-click the *access_token* item and select *Copy value*.\n#### 7. Open a new tab and go to https://jwt.io.\n#### 8. Paste the value you just copied into the *Encoded* field.\n#### 9. Examine the *scopes* claim and notice that it contains the `read:reports` scope.\n\nHow was that granted? Let's take a look."
    },
    {
      "file": "src/spa-app/app.js",
      "selection": {
        "start": {
          "line": 14,
          "character": 1
        },
        "end": {
          "line": 14,
          "character": 74
        }
      },
      "description": "## Examine the Application Code\n\nThe application uses Auth0's Express SDK to request the `read:reports` scope on behalf of the user. Since we've set up RBAC for the **Lab: API**, this request will only be granted by the Auth0 tenant's authorization server if the user's role contains this scope (permission). Furthermore, since the role is set at the Organization-level, the user will only be entitled to this scope if they log in under the context of the corresponding Organization.\n\nTo quickly test this idea, we can assign our viewer user to another Organization in which they do *NOT* have the Viewer role.\n\n### 1. In the Auth0 dashboard, create a new Organization called Big Holdings Co with the following values:\n- **Name:** `big-holdings-co`\n- **Display name:** `Big Holdings Co`\n\n### 2. Under the *Members* tab of this new Organization, add the viewer user (e.g. *username+viewer@gmail.com*) as a member of the *Big Holdings Co* Organization.\nNote that we will NOT be assigning this user a role under the context of the Big Holdings Co Organization!\n\n### 3. Now let's test the viewer user's access under the context of the Big Holdings Co Organization:\n  1. #### Switch to the tab where you visited the Lab: SPA application.\n  1. #### Log out of the application.\n  1. #### Log back in as the viewer user (e.g. *username+viewer@gmail.com*).\n  1. #### Notice that this time, you are prompted to select an Organization since this user belongs to more than one. Select *Big Holdings Co*.\n  1. #### Attempt to go to *Expenses* and notice that the resource does not load.\n\n### 4. Examine the server response:\n 1. #### Right-click the page and select *Inspect* to open Google Chrome's Developer Tools.\n 1. #### Select the *Network* tab.\n 1. #### Reload the *Expenses* page.\n 1. #### You should see a *403 (Forbidden)* status code, which indicates insufficient rights to a resource. \n\n ### 5. Examine the access token:\n 1. #### In Google Chrome's Developer Tools, select *Application*\n 1. #### Select *Local Storage* and select your application (it should be the only entry).\n 1. #### Select the entry that has \"access_token\" in its Value section.\n 1. #### At the bottom of the screen, click on innermost body to expand it. This will reveal your encoded access token as well as its decoded standard claims.\n 1. #### Right-click the *access_token* item and select *Copy value*.\n 1. #### Open a new tab and go to https://jwt.io.\n 1. #### Paste the value you just copied into the *Encoded* field.\n 1. #### Notice that `read:reports` is no longer present in the *scopes* claim."
    },
    {
      "title": "Test the Admin Account",
      "description": "## Test the Admin Account\n\nNow let's test our *admin* user, who has the Admin role under the context of the *Agency Inc* Organization.\n\n#### 1. Return to the tab where you have your *Lab: SPA* application open.\n#### 2. Log out of the *viewer* user.\n#### 3. Log in as the *admin* user (e.g. *username+admin@gmail.com*).\n#### 4. Open Google Chrome's Developer Tools if it is not already open (Right-click and select *Inspect*).\n#### 5. Retrieve the encoded access token value from *Application > Local Storage*.\n#### 6. Paste the encoded access token into *https://jwt.io* and examine the scopes.\n\nHmm...That's interesting! The admin user only seems to have the `read:expenses` scope even though we logged in under the context of *Agency Inc*, where they have the *Admin* role, which has more permissions. Why might that be?\n\n💡 Hint: You may want to take a look at the previous step (Examine the Application Code)!"
    },
    {
      "title": "Permissions vs. Requested Scopes",
      "description": "## Permissions vs. Requested Scopes\nIf you went back to the *Examine the Application Code* step, you realized that we're only requesting the `read:reports` scope (permission). So, even though the Admin Role has permits additional permissions, the Auth0 tenant's authorization server will only grant the scopes that were actually requested. Since Organizations use Role-based access control (RBAC), the requested scopes will only be granted if the role permits the them.\n\nWhile it's possible to request all possible scopes upon initial log in, it's best practice to only request and grant the scopes at the time the user needs them. This is especially true for sensitive operations such as delete operations. For added security, you can leverage Auth0 Actions to implement [Step Up Authentication](https://auth0.com/docs/secure/multi-factor-authentication/step-up-authentication) when scopes for sensitive operations are requested. "
    }
  ]
}